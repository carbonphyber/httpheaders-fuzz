# run with:
# ```
# docker compose up --build
# ```
version: "3.9"  # optional since v1.27.0
# list of frontend and backend servers
services:
  # Backend: Server to dump the raw header data passed through the frontend server
  web-backend:
    build: ./servers/web-backend/
    environment:
      - LISTEN=0.0.0.0
    networks:
      - network-webapp
    ports:
      - "80:80"
      - "8080:80"
  # Frontend: Envoy
  proxy-envoy:
    depends_on:
      - web-backend
    image: envoyproxy/envoy-alpine:v1.21-latest
    networks:
      - network-webapp
    ports:
      - "8085:10000"
    volumes:
      - ./servers/envoy/config.yaml:/etc/envoy/envoy.yaml
  # Frontend: HAProxy
  proxy-haproxy:
    depends_on:
      - web-backend
    image: haproxy:lts-alpine
    networks:
      - network-webapp
    ports:
      - "8082:80"
    volumes:
      - "./servers/haproxy/config/haproxy.cfg:/usr/local/etc/haproxy/haproxy.cfg:ro"
  # Frontend: httpd
  proxy-httpd:
    build: ./servers/httpd/
    depends_on:
      - web-backend
    networks:
      - network-webapp
    ports:
      - "8083:80"
  # Frontend: NginX
  proxy-nginx:
    depends_on:
      - web-backend
    image: nginx:stable-alpine
    networks:
      - network-webapp
    ports:
      - "8081:80"
    volumes:
      - "./servers/nginx/config/nginx.conf:/etc/nginx/nginx.conf:ro"
  # Frontend: Varnish
  proxy-varnish:
    depends_on:
      - web-backend
    image: varnish:fresh-alpine
    networks:
      - network-webapp
    ports:
      - "8084:80"
    tmpfs:
      - "/usr/local/var/varnish:exec"
    volumes:
      - "./servers/varnish/config/default.vcl:/etc/varnish/default.vcl:ro"
# networks
networks:
  network-webapp:
    name: network-webapp